[
    {
        "label": "django.contrib.auth.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.validators",
        "description": "django.contrib.auth.validators",
        "detail": "django.contrib.auth.validators",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "importPath": "django.contrib.auth.admin",
        "description": "django.contrib.auth.admin",
        "isExtraImport": true,
        "detail": "django.contrib.auth.admin",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "importPath": "django.contrib.auth.admin",
        "description": "django.contrib.auth.admin",
        "isExtraImport": true,
        "detail": "django.contrib.auth.admin",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AuthenticationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "PasswordChangeForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "django",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django",
        "description": "django",
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "template",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "template",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "template",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "Customer",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "Customer",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "Customer",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "update_session_auth_hash",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "accounts",
        "description": "accounts",
        "isExtraImport": true,
        "detail": "accounts",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "user_passes_test",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "LoginForm",
        "importPath": "accounts.forms",
        "description": "accounts.forms",
        "isExtraImport": true,
        "detail": "accounts.forms",
        "documentation": {}
    },
    {
        "label": "RegisterForm",
        "importPath": "accounts.forms",
        "description": "accounts.forms",
        "isExtraImport": true,
        "detail": "accounts.forms",
        "documentation": {}
    },
    {
        "label": "get_cart_items",
        "importPath": "store.utils",
        "description": "store.utils",
        "isExtraImport": true,
        "detail": "store.utils",
        "documentation": {}
    },
    {
        "label": "get_cart_items",
        "importPath": "store.utils",
        "description": "store.utils",
        "isExtraImport": true,
        "detail": "store.utils",
        "documentation": {}
    },
    {
        "label": "get_cart_items",
        "importPath": "store.utils",
        "description": "store.utils",
        "isExtraImport": true,
        "detail": "store.utils",
        "documentation": {}
    },
    {
        "label": "Cart",
        "importPath": "store.models",
        "description": "store.models",
        "isExtraImport": true,
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "Artwork",
        "importPath": "store.models",
        "description": "store.models",
        "isExtraImport": true,
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "Cart",
        "importPath": "store.models",
        "description": "store.models",
        "isExtraImport": true,
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "Payment",
        "importPath": "store.models",
        "description": "store.models",
        "isExtraImport": true,
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "Artwork",
        "importPath": "store.models",
        "description": "store.models",
        "isExtraImport": true,
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "Category",
        "importPath": "store.models",
        "description": "store.models",
        "isExtraImport": true,
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "Medium",
        "importPath": "store.models",
        "description": "store.models",
        "isExtraImport": true,
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "Artwork",
        "importPath": "store.models",
        "description": "store.models",
        "isExtraImport": true,
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "Category",
        "importPath": "store.models",
        "description": "store.models",
        "isExtraImport": true,
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "CheckOut",
        "importPath": "store.models",
        "description": "store.models",
        "isExtraImport": true,
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "Medium",
        "importPath": "store.models",
        "description": "store.models",
        "isExtraImport": true,
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "Order",
        "importPath": "store.models",
        "description": "store.models",
        "isExtraImport": true,
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "Payment",
        "importPath": "store.models",
        "description": "store.models",
        "isExtraImport": true,
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "Category",
        "importPath": "store.models",
        "description": "store.models",
        "isExtraImport": true,
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "Medium",
        "importPath": "store.models",
        "description": "store.models",
        "isExtraImport": true,
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "Artwork",
        "importPath": "store.models",
        "description": "store.models",
        "isExtraImport": true,
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "Order",
        "importPath": "store.models",
        "description": "store.models",
        "isExtraImport": true,
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "Cart",
        "importPath": "store.models",
        "description": "store.models",
        "isExtraImport": true,
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "CheckOut",
        "importPath": "store.models",
        "description": "store.models",
        "isExtraImport": true,
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "Artwork",
        "importPath": "store.models",
        "description": "store.models",
        "isExtraImport": true,
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "Cart",
        "importPath": "store.models",
        "description": "store.models",
        "isExtraImport": true,
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "CheckOut",
        "importPath": "store.models",
        "description": "store.models",
        "isExtraImport": true,
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "Order",
        "importPath": "store.models",
        "description": "store.models",
        "isExtraImport": true,
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "read_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "art_by_mtr",
        "description": "art_by_mtr",
        "isExtraImport": true,
        "detail": "art_by_mtr",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "Post",
        "importPath": "blog.models",
        "description": "blog.models",
        "isExtraImport": true,
        "detail": "blog.models",
        "documentation": {}
    },
    {
        "label": "Post",
        "importPath": "blog.models",
        "description": "blog.models",
        "isExtraImport": true,
        "detail": "blog.models",
        "documentation": {}
    },
    {
        "label": "Post",
        "importPath": "blog.models",
        "description": "blog.models",
        "isExtraImport": true,
        "detail": "blog.models",
        "documentation": {}
    },
    {
        "label": "Post",
        "importPath": "blog.models",
        "description": "blog.models",
        "isExtraImport": true,
        "detail": "blog.models",
        "documentation": {}
    },
    {
        "label": "Post",
        "importPath": "blog.models",
        "description": "blog.models",
        "isExtraImport": true,
        "detail": "blog.models",
        "documentation": {}
    },
    {
        "label": "Post",
        "importPath": "blog.models",
        "description": "blog.models",
        "isExtraImport": true,
        "detail": "blog.models",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "blog",
        "description": "blog",
        "isExtraImport": true,
        "detail": "blog",
        "documentation": {}
    },
    {
        "label": "Paginator",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "Paginator",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "Paginator",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "DateInput",
        "importPath": "django.forms.widgets",
        "description": "django.forms.widgets",
        "isExtraImport": true,
        "detail": "django.forms.widgets",
        "documentation": {}
    },
    {
        "label": "mark_safe",
        "importPath": "django.utils.safestring",
        "description": "django.utils.safestring",
        "isExtraImport": true,
        "detail": "django.utils.safestring",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "manager",
        "description": "manager",
        "isExtraImport": true,
        "detail": "manager",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "FileSystemStorage",
        "importPath": "django.core.files.storage",
        "description": "django.core.files.storage",
        "isExtraImport": true,
        "detail": "django.core.files.storage",
        "documentation": {}
    },
    {
        "label": "require_POST",
        "importPath": "django.views.decorators.http",
        "description": "django.views.decorators.http",
        "isExtraImport": true,
        "detail": "django.views.decorators.http",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Prefetch",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "slugify",
        "importPath": "django.utils.text",
        "description": "django.utils.text",
        "isExtraImport": true,
        "detail": "django.utils.text",
        "documentation": {}
    },
    {
        "label": "slugify",
        "importPath": "django.utils.text",
        "description": "django.utils.text",
        "isExtraImport": true,
        "detail": "django.utils.text",
        "documentation": {}
    },
    {
        "label": "ArtworkForm",
        "importPath": "manager.forms",
        "description": "manager.forms",
        "isExtraImport": true,
        "detail": "manager.forms",
        "documentation": {}
    },
    {
        "label": "CategoryForm",
        "importPath": "manager.forms",
        "description": "manager.forms",
        "isExtraImport": true,
        "detail": "manager.forms",
        "documentation": {}
    },
    {
        "label": "MediumForm",
        "importPath": "manager.forms",
        "description": "manager.forms",
        "isExtraImport": true,
        "detail": "manager.forms",
        "documentation": {}
    },
    {
        "label": "PostForm",
        "importPath": "manager.forms",
        "description": "manager.forms",
        "isExtraImport": true,
        "detail": "manager.forms",
        "documentation": {}
    },
    {
        "label": "django.utils",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils",
        "description": "django.utils",
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "Faker",
        "importPath": "faker",
        "description": "faker",
        "isExtraImport": true,
        "detail": "faker",
        "documentation": {}
    },
    {
        "label": "ContentFile",
        "importPath": "django.core.files.base",
        "description": "django.core.files.base",
        "isExtraImport": true,
        "detail": "django.core.files.base",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "shortuuid.django_fields",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shortuuid.django_fields",
        "description": "shortuuid.django_fields",
        "detail": "shortuuid.django_fields",
        "documentation": {}
    },
    {
        "label": "ShortUUIDField",
        "importPath": "shortuuid.django_fields",
        "description": "shortuuid.django_fields",
        "isExtraImport": true,
        "detail": "shortuuid.django_fields",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "store",
        "description": "store",
        "isExtraImport": true,
        "detail": "store",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "send_mail",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "method_decorator",
        "importPath": "django.utils.decorators",
        "description": "django.utils.decorators",
        "isExtraImport": true,
        "detail": "django.utils.decorators",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic.base",
        "description": "django.views.generic.base",
        "isExtraImport": true,
        "detail": "django.views.generic.base",
        "documentation": {}
    },
    {
        "label": "render_to_string",
        "importPath": "django.template.loader",
        "description": "django.template.loader",
        "isExtraImport": true,
        "detail": "django.template.loader",
        "documentation": {}
    },
    {
        "label": "strip_tags",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "paypalrestsdk",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "paypalrestsdk",
        "description": "paypalrestsdk",
        "detail": "paypalrestsdk",
        "documentation": {}
    },
    {
        "label": "stripe",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "stripe",
        "description": "stripe",
        "detail": "stripe",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "accounts.migrations.0001_initial",
        "description": "accounts.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Customer',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "accounts.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "CustomerAdmin",
        "kind": 6,
        "importPath": "accounts.admin",
        "description": "accounts.admin",
        "peekOfCode": "class CustomerAdmin(UserAdmin):\n    # Liste des champs à afficher dans l'interface d'administration\n    list_display = ('username', 'email', 'first_name', 'last_name', 'is_staff')\n    # Liste des champs à filtrer dans l'interface d'administration\n    list_filter = ('is_staff', 'is_superuser', 'is_active', 'groups')\n    # Champs de recherche dans l'interface d'administration\n    search_fields = ('username', 'email', 'first_name', 'last_name')\n    # Champs pour l'ajout et la modification d'un utilisateur dans l'interface d'administration\n    fieldsets = (\n        (None, {'fields': ('username', 'password')}),",
        "detail": "accounts.admin",
        "documentation": {}
    },
    {
        "label": "AccountsConfig",
        "kind": 6,
        "importPath": "accounts.apps",
        "description": "accounts.apps",
        "peekOfCode": "class AccountsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'accounts'",
        "detail": "accounts.apps",
        "documentation": {}
    },
    {
        "label": "LoginForm",
        "kind": 6,
        "importPath": "accounts.forms",
        "description": "accounts.forms",
        "peekOfCode": "class LoginForm(AuthenticationForm):\n    username = forms.CharField(widget=forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Entrer votre nom d''utilisateur'}))\n    password = forms.CharField(widget=forms.PasswordInput(attrs={'class': 'form-control', 'placeholder': 'Entrer votre mot de passe'}))\nclass RegisterForm(forms.ModelForm):\n    password = forms.CharField(widget=forms.PasswordInput(attrs={'class': 'form-control', 'placeholder': 'Entrer votre mot de passe'}))\n    confirm_password = forms.CharField(widget=forms.PasswordInput(attrs={'class': 'form-control', 'placeholder': 'Confirmer votre mot de passe'}))\n    class Meta:\n        model = Customer\n        fields =  ['username', 'first_name', 'last_name', 'email', 'password']\n        widgets = {",
        "detail": "accounts.forms",
        "documentation": {}
    },
    {
        "label": "RegisterForm",
        "kind": 6,
        "importPath": "accounts.forms",
        "description": "accounts.forms",
        "peekOfCode": "class RegisterForm(forms.ModelForm):\n    password = forms.CharField(widget=forms.PasswordInput(attrs={'class': 'form-control', 'placeholder': 'Entrer votre mot de passe'}))\n    confirm_password = forms.CharField(widget=forms.PasswordInput(attrs={'class': 'form-control', 'placeholder': 'Confirmer votre mot de passe'}))\n    class Meta:\n        model = Customer\n        fields =  ['username', 'first_name', 'last_name', 'email', 'password']\n        widgets = {\n            'username': forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Entrer un nom d''utilisateur'}),\n            'first_name': forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Entrer votre prenom'}),\n            'last_name': forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Entrer votre nom'}),",
        "detail": "accounts.forms",
        "documentation": {}
    },
    {
        "label": "Customer",
        "kind": 6,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "class Customer(AbstractUser):\n    def get_full_name(self):\n        full_name = f\"{self.first_name} {self.last_name}\"\n        return full_name.strip() if full_name.strip() else self.username\n    def __str__(self):\n        return self.get_full_name() or self.username",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "accounts.urls",
        "description": "accounts.urls",
        "peekOfCode": "app_name = \"accounts\"\nurlpatterns = [\n    path(\"\", views.show, name=\"profile\"),\n    path(\"login\", views.login_page, name=\"login\"),\n    path(\"logout\", views.logout_page, name=\"logout\"),\n    path(\"register\", views.register_page, name=\"register\"),\n    path(\"update-account\", views.update, name=\"update-account\"),\n    path('change-password/', views.change_password, name='change-password'),\n    path('password_reset/', auth_views.PasswordResetView.as_view(), name='password_reset'),\n    path('password_reset/done/', auth_views.PasswordResetDoneView.as_view(), name='password_reset_done'),",
        "detail": "accounts.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "accounts.urls",
        "description": "accounts.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"\", views.show, name=\"profile\"),\n    path(\"login\", views.login_page, name=\"login\"),\n    path(\"logout\", views.logout_page, name=\"logout\"),\n    path(\"register\", views.register_page, name=\"register\"),\n    path(\"update-account\", views.update, name=\"update-account\"),\n    path('change-password/', views.change_password, name='change-password'),\n    path('password_reset/', auth_views.PasswordResetView.as_view(), name='password_reset'),\n    path('password_reset/done/', auth_views.PasswordResetDoneView.as_view(), name='password_reset_done'),\n    path('reset/<uidb64>/<token>/', auth_views.PasswordResetConfirmView.as_view(), name='password_reset_confirm'),",
        "detail": "accounts.urls",
        "documentation": {}
    },
    {
        "label": "login_page",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def login_page(request) -> HttpResponse:\n    if request.method == \"POST\":\n        form = LoginForm(request, data=request.POST)\n        if form.is_valid():\n            try:\n                user = form.get_user()\n                login(request, user)\n                return redirect(\"store:home\")\n            except:\n                form.add_error(None, \"Identifiant ou mot de passe incorrect\")",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "logout_page",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def logout_page(request) -> HttpResponse:\n    logout(request)\n    return redirect(\"store:home\")\ndef register_page(request) -> HttpResponse:\n    if request.method == \"POST\":\n        form = RegisterForm(request.POST)\n        if form.is_valid():\n            first_name = form.cleaned_data.get(\"first_name\")\n            last_name = form.cleaned_data.get(\"last_name\")\n            username = form.cleaned_data.get(\"username\")",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "register_page",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def register_page(request) -> HttpResponse:\n    if request.method == \"POST\":\n        form = RegisterForm(request.POST)\n        if form.is_valid():\n            first_name = form.cleaned_data.get(\"first_name\")\n            last_name = form.cleaned_data.get(\"last_name\")\n            username = form.cleaned_data.get(\"username\")\n            email = form.cleaned_data.get(\"email\")\n            pwd = form.cleaned_data.get(\"password\")\n            Customer.objects.create_user(",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "show",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def show(request) -> HttpResponse:\n    cart_items = None\n    user = request.user\n    if user.is_authenticated:\n        try:\n            cart, _ = get_cart_items(user)\n            cart_items = cart.select_related('artwork').order_by('-updated_at')\n        except Cart.DoesNotExist:\n            cart = None\n        is_admin_or_team_member = user.is_superuser or user.groups.filter(name='team').exists()",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "update",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def update(request) -> HttpResponse:\n    if request.method == \"POST\":\n        form = request.POST\n        first_name = form.get(\"first_name\")\n        last_name = form.get(\"last_name\")\n        username = form.get(\"username\")\n        email = form.get(\"email\")\n        user = get_object_or_404(Customer, pk = request.user.pk)\n        user.first_name = first_name\n        user.last_name = last_name",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def change_password(request):\n    if request.method == 'POST':\n        form = PasswordChangeForm(request.user, request.POST)\n        if form.is_valid():\n            user = form.save()\n            update_session_auth_hash(request, user)  # Important to update the session with the new password\n            messages.success(request, 'Votre mot de passe a été mis à jour avec succès!')\n            return redirect('accounts:change-password')\n        else:\n            messages.error(request, 'Veuillez corriger les erreurs ci-dessous.')",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "destroy",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def destroy(request) -> HttpResponse:\n    Customer = get_object_or_404(Customer, pk = request.user.pk)\n    logout(request)\n    Customer.delete()\n    return redirect(\"store:home\")",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "art_by_mtr.asgi",
        "description": "art_by_mtr.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "art_by_mtr.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "art_by_mtr.settings",
        "description": "art_by_mtr.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-@9js1jr2do8^_c4em)#x(s-q#fih16hk010m4ze2gldb*tim6+'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "art_by_mtr.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "art_by_mtr.settings",
        "description": "art_by_mtr.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-@9js1jr2do8^_c4em)#x(s-q#fih16hk010m4ze2gldb*tim6+'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "art_by_mtr.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "art_by_mtr.settings",
        "description": "art_by_mtr.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "art_by_mtr.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "art_by_mtr.settings",
        "description": "art_by_mtr.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'accounts',",
        "detail": "art_by_mtr.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "art_by_mtr.settings",
        "description": "art_by_mtr.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'accounts',\n    'blog',\n    'manager',",
        "detail": "art_by_mtr.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "art_by_mtr.settings",
        "description": "art_by_mtr.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'art_by_mtr.urls'",
        "detail": "art_by_mtr.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "art_by_mtr.settings",
        "description": "art_by_mtr.settings",
        "peekOfCode": "ROOT_URLCONF = 'art_by_mtr.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [\n            BASE_DIR / \"art_by_mtr/templates\",\n        ],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [",
        "detail": "art_by_mtr.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "art_by_mtr.settings",
        "description": "art_by_mtr.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [\n            BASE_DIR / \"art_by_mtr/templates\",\n        ],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',",
        "detail": "art_by_mtr.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "art_by_mtr.settings",
        "description": "art_by_mtr.settings",
        "peekOfCode": "WSGI_APPLICATION = 'art_by_mtr.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/5.0/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n    #  \"default\": {\n    #     \"ENGINE\" : \"django.db.backends.mysql\",",
        "detail": "art_by_mtr.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "art_by_mtr.settings",
        "description": "art_by_mtr.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n    #  \"default\": {\n    #     \"ENGINE\" : \"django.db.backends.mysql\",\n    #     \"NAME\": os.getenv(\"NAME\"),\n    #     \"USER\": os.getenv(\"USER\"),\n    #     \"PASSWORD\": os.getenv(\"PASS\"),",
        "detail": "art_by_mtr.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "art_by_mtr.settings",
        "description": "art_by_mtr.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "art_by_mtr.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_BACKEND",
        "kind": 5,
        "importPath": "art_by_mtr.settings",
        "description": "art_by_mtr.settings",
        "peekOfCode": "EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = os.getenv('EMAIL_HOST', default='smtp.gmail.com')\nEMAIL_PORT = os.getenv('EMAIL_PORT', default=587)\nEMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', default=True)\nEMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')\nDEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL')\nCONTACT_EMAIL = os.getenv('CONTACT_EMAIL')\n# Stripe settings\nSTRIPE_PUBLIC_KEY = os.getenv('STRIPE_PUBLIC_KEY')",
        "detail": "art_by_mtr.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST",
        "kind": 5,
        "importPath": "art_by_mtr.settings",
        "description": "art_by_mtr.settings",
        "peekOfCode": "EMAIL_HOST = os.getenv('EMAIL_HOST', default='smtp.gmail.com')\nEMAIL_PORT = os.getenv('EMAIL_PORT', default=587)\nEMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', default=True)\nEMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')\nDEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL')\nCONTACT_EMAIL = os.getenv('CONTACT_EMAIL')\n# Stripe settings\nSTRIPE_PUBLIC_KEY = os.getenv('STRIPE_PUBLIC_KEY')\nSTRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY ')",
        "detail": "art_by_mtr.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_PORT",
        "kind": 5,
        "importPath": "art_by_mtr.settings",
        "description": "art_by_mtr.settings",
        "peekOfCode": "EMAIL_PORT = os.getenv('EMAIL_PORT', default=587)\nEMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', default=True)\nEMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')\nDEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL')\nCONTACT_EMAIL = os.getenv('CONTACT_EMAIL')\n# Stripe settings\nSTRIPE_PUBLIC_KEY = os.getenv('STRIPE_PUBLIC_KEY')\nSTRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY ')\n# PayPal settings",
        "detail": "art_by_mtr.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_USE_TLS",
        "kind": 5,
        "importPath": "art_by_mtr.settings",
        "description": "art_by_mtr.settings",
        "peekOfCode": "EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', default=True)\nEMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')\nDEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL')\nCONTACT_EMAIL = os.getenv('CONTACT_EMAIL')\n# Stripe settings\nSTRIPE_PUBLIC_KEY = os.getenv('STRIPE_PUBLIC_KEY')\nSTRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY ')\n# PayPal settings\nPAYPAL_CLIENT_ID = os.getenv('PAYPAL_CLIENT_ID')",
        "detail": "art_by_mtr.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_USER",
        "kind": 5,
        "importPath": "art_by_mtr.settings",
        "description": "art_by_mtr.settings",
        "peekOfCode": "EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')\nDEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL')\nCONTACT_EMAIL = os.getenv('CONTACT_EMAIL')\n# Stripe settings\nSTRIPE_PUBLIC_KEY = os.getenv('STRIPE_PUBLIC_KEY')\nSTRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY ')\n# PayPal settings\nPAYPAL_CLIENT_ID = os.getenv('PAYPAL_CLIENT_ID')\nPAYPAL_CLIENT_SECRET = os.getenv('PAYPAL_CLIENT_SECRET')",
        "detail": "art_by_mtr.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_PASSWORD",
        "kind": 5,
        "importPath": "art_by_mtr.settings",
        "description": "art_by_mtr.settings",
        "peekOfCode": "EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')\nDEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL')\nCONTACT_EMAIL = os.getenv('CONTACT_EMAIL')\n# Stripe settings\nSTRIPE_PUBLIC_KEY = os.getenv('STRIPE_PUBLIC_KEY')\nSTRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY ')\n# PayPal settings\nPAYPAL_CLIENT_ID = os.getenv('PAYPAL_CLIENT_ID')\nPAYPAL_CLIENT_SECRET = os.getenv('PAYPAL_CLIENT_SECRET')\nPAYPAL_MODE = 'sandbox'  # or 'live'",
        "detail": "art_by_mtr.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_FROM_EMAIL",
        "kind": 5,
        "importPath": "art_by_mtr.settings",
        "description": "art_by_mtr.settings",
        "peekOfCode": "DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL')\nCONTACT_EMAIL = os.getenv('CONTACT_EMAIL')\n# Stripe settings\nSTRIPE_PUBLIC_KEY = os.getenv('STRIPE_PUBLIC_KEY')\nSTRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY ')\n# PayPal settings\nPAYPAL_CLIENT_ID = os.getenv('PAYPAL_CLIENT_ID')\nPAYPAL_CLIENT_SECRET = os.getenv('PAYPAL_CLIENT_SECRET')\nPAYPAL_MODE = 'sandbox'  # or 'live'\n# Internationalization",
        "detail": "art_by_mtr.settings",
        "documentation": {}
    },
    {
        "label": "CONTACT_EMAIL",
        "kind": 5,
        "importPath": "art_by_mtr.settings",
        "description": "art_by_mtr.settings",
        "peekOfCode": "CONTACT_EMAIL = os.getenv('CONTACT_EMAIL')\n# Stripe settings\nSTRIPE_PUBLIC_KEY = os.getenv('STRIPE_PUBLIC_KEY')\nSTRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY ')\n# PayPal settings\nPAYPAL_CLIENT_ID = os.getenv('PAYPAL_CLIENT_ID')\nPAYPAL_CLIENT_SECRET = os.getenv('PAYPAL_CLIENT_SECRET')\nPAYPAL_MODE = 'sandbox'  # or 'live'\n# Internationalization\n# https://docs.djangoproject.com/en/5.0/topics/i18n/",
        "detail": "art_by_mtr.settings",
        "documentation": {}
    },
    {
        "label": "STRIPE_PUBLIC_KEY",
        "kind": 5,
        "importPath": "art_by_mtr.settings",
        "description": "art_by_mtr.settings",
        "peekOfCode": "STRIPE_PUBLIC_KEY = os.getenv('STRIPE_PUBLIC_KEY')\nSTRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY ')\n# PayPal settings\nPAYPAL_CLIENT_ID = os.getenv('PAYPAL_CLIENT_ID')\nPAYPAL_CLIENT_SECRET = os.getenv('PAYPAL_CLIENT_SECRET')\nPAYPAL_MODE = 'sandbox'  # or 'live'\n# Internationalization\n# https://docs.djangoproject.com/en/5.0/topics/i18n/\nLANGUAGE_CODE = 'fr-FR'\nTIME_ZONE = 'UTC'",
        "detail": "art_by_mtr.settings",
        "documentation": {}
    },
    {
        "label": "STRIPE_SECRET_KEY",
        "kind": 5,
        "importPath": "art_by_mtr.settings",
        "description": "art_by_mtr.settings",
        "peekOfCode": "STRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY ')\n# PayPal settings\nPAYPAL_CLIENT_ID = os.getenv('PAYPAL_CLIENT_ID')\nPAYPAL_CLIENT_SECRET = os.getenv('PAYPAL_CLIENT_SECRET')\nPAYPAL_MODE = 'sandbox'  # or 'live'\n# Internationalization\n# https://docs.djangoproject.com/en/5.0/topics/i18n/\nLANGUAGE_CODE = 'fr-FR'\nTIME_ZONE = 'UTC'\nUSE_I18N = True",
        "detail": "art_by_mtr.settings",
        "documentation": {}
    },
    {
        "label": "PAYPAL_CLIENT_ID",
        "kind": 5,
        "importPath": "art_by_mtr.settings",
        "description": "art_by_mtr.settings",
        "peekOfCode": "PAYPAL_CLIENT_ID = os.getenv('PAYPAL_CLIENT_ID')\nPAYPAL_CLIENT_SECRET = os.getenv('PAYPAL_CLIENT_SECRET')\nPAYPAL_MODE = 'sandbox'  # or 'live'\n# Internationalization\n# https://docs.djangoproject.com/en/5.0/topics/i18n/\nLANGUAGE_CODE = 'fr-FR'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)",
        "detail": "art_by_mtr.settings",
        "documentation": {}
    },
    {
        "label": "PAYPAL_CLIENT_SECRET",
        "kind": 5,
        "importPath": "art_by_mtr.settings",
        "description": "art_by_mtr.settings",
        "peekOfCode": "PAYPAL_CLIENT_SECRET = os.getenv('PAYPAL_CLIENT_SECRET')\nPAYPAL_MODE = 'sandbox'  # or 'live'\n# Internationalization\n# https://docs.djangoproject.com/en/5.0/topics/i18n/\nLANGUAGE_CODE = 'fr-FR'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/",
        "detail": "art_by_mtr.settings",
        "documentation": {}
    },
    {
        "label": "PAYPAL_MODE",
        "kind": 5,
        "importPath": "art_by_mtr.settings",
        "description": "art_by_mtr.settings",
        "peekOfCode": "PAYPAL_MODE = 'sandbox'  # or 'live'\n# Internationalization\n# https://docs.djangoproject.com/en/5.0/topics/i18n/\nLANGUAGE_CODE = 'fr-FR'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'",
        "detail": "art_by_mtr.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "art_by_mtr.settings",
        "description": "art_by_mtr.settings",
        "peekOfCode": "LANGUAGE_CODE = 'fr-FR'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [\n    BASE_DIR / 'art_by_mtr/static',\n]",
        "detail": "art_by_mtr.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "art_by_mtr.settings",
        "description": "art_by_mtr.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [\n    BASE_DIR / 'art_by_mtr/static',\n]\nSTATIC_ROOT = 'static_root'",
        "detail": "art_by_mtr.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "art_by_mtr.settings",
        "description": "art_by_mtr.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [\n    BASE_DIR / 'art_by_mtr/static',\n]\nSTATIC_ROOT = 'static_root'\n# Default primary key field type",
        "detail": "art_by_mtr.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "art_by_mtr.settings",
        "description": "art_by_mtr.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [\n    BASE_DIR / 'art_by_mtr/static',\n]\nSTATIC_ROOT = 'static_root'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field",
        "detail": "art_by_mtr.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "art_by_mtr.settings",
        "description": "art_by_mtr.settings",
        "peekOfCode": "STATIC_URL = 'static/'\nSTATICFILES_DIRS = [\n    BASE_DIR / 'art_by_mtr/static',\n]\nSTATIC_ROOT = 'static_root'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = \"accounts.Customer\"\nROOT_URLCONF = 'art_by_mtr.urls'",
        "detail": "art_by_mtr.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "art_by_mtr.settings",
        "description": "art_by_mtr.settings",
        "peekOfCode": "STATICFILES_DIRS = [\n    BASE_DIR / 'art_by_mtr/static',\n]\nSTATIC_ROOT = 'static_root'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = \"accounts.Customer\"\nROOT_URLCONF = 'art_by_mtr.urls'\nLOGIN_URL = 'accounts:login'",
        "detail": "art_by_mtr.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "art_by_mtr.settings",
        "description": "art_by_mtr.settings",
        "peekOfCode": "STATIC_ROOT = 'static_root'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = \"accounts.Customer\"\nROOT_URLCONF = 'art_by_mtr.urls'\nLOGIN_URL = 'accounts:login'\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / 'media'\nCOMPONENTS_DIRS : dict = {",
        "detail": "art_by_mtr.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "art_by_mtr.settings",
        "description": "art_by_mtr.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = \"accounts.Customer\"\nROOT_URLCONF = 'art_by_mtr.urls'\nLOGIN_URL = 'accounts:login'\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / 'media'\nCOMPONENTS_DIRS : dict = {\n    \"global\": \"components/\",\n    \"store\": \"store/components/\",\n    \"blog\": \"blog/components/\",",
        "detail": "art_by_mtr.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "art_by_mtr.settings",
        "description": "art_by_mtr.settings",
        "peekOfCode": "AUTH_USER_MODEL = \"accounts.Customer\"\nROOT_URLCONF = 'art_by_mtr.urls'\nLOGIN_URL = 'accounts:login'\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / 'media'\nCOMPONENTS_DIRS : dict = {\n    \"global\": \"components/\",\n    \"store\": \"store/components/\",\n    \"blog\": \"blog/components/\",\n    \"manager\": \"manager/components/\",",
        "detail": "art_by_mtr.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "art_by_mtr.settings",
        "description": "art_by_mtr.settings",
        "peekOfCode": "ROOT_URLCONF = 'art_by_mtr.urls'\nLOGIN_URL = 'accounts:login'\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / 'media'\nCOMPONENTS_DIRS : dict = {\n    \"global\": \"components/\",\n    \"store\": \"store/components/\",\n    \"blog\": \"blog/components/\",\n    \"manager\": \"manager/components/\",\n}",
        "detail": "art_by_mtr.settings",
        "documentation": {}
    },
    {
        "label": "LOGIN_URL",
        "kind": 5,
        "importPath": "art_by_mtr.settings",
        "description": "art_by_mtr.settings",
        "peekOfCode": "LOGIN_URL = 'accounts:login'\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / 'media'\nCOMPONENTS_DIRS : dict = {\n    \"global\": \"components/\",\n    \"store\": \"store/components/\",\n    \"blog\": \"blog/components/\",\n    \"manager\": \"manager/components/\",\n}\nELEMENTS_PER_PAGE = 9",
        "detail": "art_by_mtr.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "art_by_mtr.settings",
        "description": "art_by_mtr.settings",
        "peekOfCode": "MEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / 'media'\nCOMPONENTS_DIRS : dict = {\n    \"global\": \"components/\",\n    \"store\": \"store/components/\",\n    \"blog\": \"blog/components/\",\n    \"manager\": \"manager/components/\",\n}\nELEMENTS_PER_PAGE = 9",
        "detail": "art_by_mtr.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "art_by_mtr.settings",
        "description": "art_by_mtr.settings",
        "peekOfCode": "MEDIA_ROOT = BASE_DIR / 'media'\nCOMPONENTS_DIRS : dict = {\n    \"global\": \"components/\",\n    \"store\": \"store/components/\",\n    \"blog\": \"blog/components/\",\n    \"manager\": \"manager/components/\",\n}\nELEMENTS_PER_PAGE = 9",
        "detail": "art_by_mtr.settings",
        "documentation": {}
    },
    {
        "label": "ELEMENTS_PER_PAGE",
        "kind": 5,
        "importPath": "art_by_mtr.settings",
        "description": "art_by_mtr.settings",
        "peekOfCode": "ELEMENTS_PER_PAGE = 9",
        "detail": "art_by_mtr.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "art_by_mtr.urls",
        "description": "art_by_mtr.urls",
        "peekOfCode": "urlpatterns = [\n    path('dev-admin/', admin.site.urls),\n    path('', include('store.urls')),\n    path('accounts/', include('accounts.urls')),\n    path('blog/', include('blog.urls')),\n    path('management/', include('manager.urls')),\n] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\nif settings.DEBUG:\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)",
        "detail": "art_by_mtr.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "art_by_mtr.wsgi",
        "description": "art_by_mtr.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "art_by_mtr.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "blog.migrations.0001_initial",
        "description": "blog.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('store', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Post',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "blog.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "breadcrumb",
        "kind": 2,
        "importPath": "blog.templatetags.blog_custom_tags",
        "description": "blog.templatetags.blog_custom_tags",
        "peekOfCode": "def breadcrumb(title, msg, user, cart_items, *args, **kwargs):\n  data = {\n    'title': title,\n    'msg': msg,\n    'user': user,\n    'preview_cart_items': cart_items,\n  }\n  return data\n@register.inclusion_tag(os.path.join(settings.COMPONENTS_DIRS.get('blog'), \"post-card.html\"))\ndef postCard(post, *args, **kwargs):",
        "detail": "blog.templatetags.blog_custom_tags",
        "documentation": {}
    },
    {
        "label": "postCard",
        "kind": 2,
        "importPath": "blog.templatetags.blog_custom_tags",
        "description": "blog.templatetags.blog_custom_tags",
        "peekOfCode": "def postCard(post, *args, **kwargs):\n  data = {\n    'post': post,\n  }\n  return data",
        "detail": "blog.templatetags.blog_custom_tags",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "blog.templatetags.blog_custom_tags",
        "description": "blog.templatetags.blog_custom_tags",
        "peekOfCode": "register = template.Library()\n@register.inclusion_tag(os.path.join(settings.COMPONENTS_DIRS.get('global'), \"breadcrumb.html\"))\ndef breadcrumb(title, msg, user, cart_items, *args, **kwargs):\n  data = {\n    'title': title,\n    'msg': msg,\n    'user': user,\n    'preview_cart_items': cart_items,\n  }\n  return data",
        "detail": "blog.templatetags.blog_custom_tags",
        "documentation": {}
    },
    {
        "label": "PostAdmin",
        "kind": 6,
        "importPath": "blog.admin",
        "description": "blog.admin",
        "peekOfCode": "class PostAdmin(admin.ModelAdmin):\n    list_display = ('title', 'event_date', 'event_place', 'created_at', 'updated_at')\n    list_filter = ('event_date', 'event_place', 'created_at', 'updated_at')\n    search_fields = ('title', 'description')\n    prepopulated_fields = {'slug': ('title',)}",
        "detail": "blog.admin",
        "documentation": {}
    },
    {
        "label": "BlogConfig",
        "kind": 6,
        "importPath": "blog.apps",
        "description": "blog.apps",
        "peekOfCode": "class BlogConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'blog'",
        "detail": "blog.apps",
        "documentation": {}
    },
    {
        "label": "Post",
        "kind": 6,
        "importPath": "blog.models",
        "description": "blog.models",
        "peekOfCode": "class Post(models.Model):\n    title = models.CharField(\n        max_length=180, \n        unique=True, \n        verbose_name=\"Thème de l'événement\"\n    )\n    slug = models.SlugField(\n        max_length=250,\n        unique=True,\n    )",
        "detail": "blog.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "blog.urls",
        "description": "blog.urls",
        "peekOfCode": "app_name = \"blog\"\nurlpatterns = [\n   path('', views.blog_page, name=\"home\"),\n   path('posts/<str:slug>/', views.post_detail_page, name=\"post-detail\"),\n]\n# handler404 = f\"{app_name}.views.page_404\"",
        "detail": "blog.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "blog.urls",
        "description": "blog.urls",
        "peekOfCode": "urlpatterns = [\n   path('', views.blog_page, name=\"home\"),\n   path('posts/<str:slug>/', views.post_detail_page, name=\"post-detail\"),\n]\n# handler404 = f\"{app_name}.views.page_404\"",
        "detail": "blog.urls",
        "documentation": {}
    },
    {
        "label": "blog_page",
        "kind": 2,
        "importPath": "blog.views",
        "description": "blog.views",
        "peekOfCode": "def blog_page(request):\n    posts = Post.objects.all().order_by(\"-updated_at\")\n    cart_items = None\n    user = request.user\n    if user.is_authenticated:\n        try:\n            cart, _ = get_cart_items(user)\n            cart_items = cart.select_related('artwork').order_by('-updated_at')\n        except Cart.DoesNotExist:\n            cart = None",
        "detail": "blog.views",
        "documentation": {}
    },
    {
        "label": "post_detail_page",
        "kind": 2,
        "importPath": "blog.views",
        "description": "blog.views",
        "peekOfCode": "def post_detail_page(request, slug) -> HttpResponse:\n    cart_items = None\n    user = request.user\n    if user.is_authenticated:\n        try:\n            cart, _ = get_cart_items(user)\n            cart_items = cart.select_related('artwork').order_by('-updated_at')\n        except Cart.DoesNotExist:\n            cart = None\n    post = get_object_or_404(Post, slug=slug)",
        "detail": "blog.views",
        "documentation": {}
    },
    {
        "label": "topbar",
        "kind": 2,
        "importPath": "manager.templatetags.manager_custom_tags",
        "description": "manager.templatetags.manager_custom_tags",
        "peekOfCode": "def topbar(title, user, *args, **kwargs):\n  data = {\n    'title': title,\n    'user': user,\n  }\n  return data",
        "detail": "manager.templatetags.manager_custom_tags",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "manager.templatetags.manager_custom_tags",
        "description": "manager.templatetags.manager_custom_tags",
        "peekOfCode": "register = template.Library()\n@register.inclusion_tag(os.path.join(settings.COMPONENTS_DIRS.get('manager'), \"topbar.html\"))\ndef topbar(title, user, *args, **kwargs):\n  data = {\n    'title': title,\n    'user': user,\n  }\n  return data",
        "detail": "manager.templatetags.manager_custom_tags",
        "documentation": {}
    },
    {
        "label": "PaymentAdmin",
        "kind": 6,
        "importPath": "manager.admin",
        "description": "manager.admin",
        "peekOfCode": "class PaymentAdmin(admin.ModelAdmin):\n    list_display = ('id', 'currency', 'status', 'created_at', 'updated_at')\n    list_filter = ('status', 'created_at', 'updated_at')\n    search_fields = ('checkout__customer__username',)  # Recherche par nom d'utilisateur du client\n    readonly_fields = ('created_at', 'updated_at')  # Champs en lecture seule\n    def has_delete_permission(self, request, obj=None):\n        return False  # Désactiver la suppression via l'interface admin\n    def has_add_permission(self, request):\n        return False  # Désactiver l'ajout via l'interface admin\n    def has_change_permission(self, request, obj=None):",
        "detail": "manager.admin",
        "documentation": {}
    },
    {
        "label": "ManagerConfig",
        "kind": 6,
        "importPath": "manager.apps",
        "description": "manager.apps",
        "peekOfCode": "class ManagerConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'manager'",
        "detail": "manager.apps",
        "documentation": {}
    },
    {
        "label": "DatePickerWidget",
        "kind": 6,
        "importPath": "manager.forms",
        "description": "manager.forms",
        "peekOfCode": "class DatePickerWidget(DateInput):\n    def __init__(self, attrs=None, format='%Y-%m-%d'):\n        self.format = format\n        super().__init__(attrs={'class': 'datepicker form-control', 'data-provide': 'datepicker'}, format=format)\n    def render(self, name, value, attrs=None, renderer=None):\n        render_value = value.strftime(self.format) if isinstance(value, datetime.date) else ''\n        final_attrs = self.build_attrs(attrs, {'name': name})\n        return mark_safe(f'<input type=\"text\" value=\"{render_value}\"{\" \".join([f\"{k}={v}\" for k, v in final_attrs.items()])} />')\nclass PostForm(forms.ModelForm):\n    class Meta:",
        "detail": "manager.forms",
        "documentation": {}
    },
    {
        "label": "PostForm",
        "kind": 6,
        "importPath": "manager.forms",
        "description": "manager.forms",
        "peekOfCode": "class PostForm(forms.ModelForm):\n    class Meta:\n        model = Post\n        fields = ['title', 'description', 'content', 'event_date', 'event_place', 'thumbnail']\n        labels = {\n            'title': 'Nom évènement',\n            'description': 'Description',\n            'content': 'Plus de détail',\n            'event_date': 'Date évènement',\n            'event_place': 'Lieu évènement',",
        "detail": "manager.forms",
        "documentation": {}
    },
    {
        "label": "ArtworkForm",
        "kind": 6,
        "importPath": "manager.forms",
        "description": "manager.forms",
        "peekOfCode": "class ArtworkForm(forms.ModelForm):\n    class Meta:\n        model = Artwork\n        fields = ['title', 'description', 'price', 'stock', 'width', 'height', 'thumbnail', 'category', 'medium']\n        labels = {\n            'title': 'Titre',\n            'description': 'Description',\n            'price': 'Prix',\n            'stock': 'Stock',\n            'width': 'Largeur',",
        "detail": "manager.forms",
        "documentation": {}
    },
    {
        "label": "CategoryForm",
        "kind": 6,
        "importPath": "manager.forms",
        "description": "manager.forms",
        "peekOfCode": "class CategoryForm(forms.ModelForm):\n    class Meta:\n        model = Category\n        fields = ['name', 'description']\n        labels = {\n            'name': \"Nom de la Category\",\n            'description': \"Description\",\n        }\n        widgets = {\n            'name': forms.TextInput(attrs={'class': 'form-control'}),",
        "detail": "manager.forms",
        "documentation": {}
    },
    {
        "label": "MediumForm",
        "kind": 6,
        "importPath": "manager.forms",
        "description": "manager.forms",
        "peekOfCode": "class MediumForm(forms.ModelForm):\n    class Meta:\n        model = Medium\n        fields = ['name']\n        labels = {\n            'name': \"Nom du support\",\n        }\n        widgets = {\n            'name': forms.TextInput(attrs={'class': 'form-control'}),\n        }",
        "detail": "manager.forms",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "manager.urls",
        "description": "manager.urls",
        "peekOfCode": "app_name = \"manager\"\nurlpatterns = [\n   path('', views.dashboard_page, name = 'dashboard'),\n   path('artworks/create/', views.ArtworkController.store, name = 'add-artwork'),\n   path('artworks/', views.ArtworkController.index, name = 'artwork-list'),\n   path('artworks/update/<str:artwork_id>/', views.ArtworkController.update, name = 'update-artwork'),\n   path('artworks/delete/', views.ArtworkController.destroy, name = 'delete-artwork'),\n   path('posts/create/', views.PostController.store, name = 'add-post'),\n   path('posts/', views.PostController.index, name = 'post-list'),\n   path('posts/update/<str:post_id>/', views.PostController.update, name = 'update-post'),",
        "detail": "manager.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "manager.urls",
        "description": "manager.urls",
        "peekOfCode": "urlpatterns = [\n   path('', views.dashboard_page, name = 'dashboard'),\n   path('artworks/create/', views.ArtworkController.store, name = 'add-artwork'),\n   path('artworks/', views.ArtworkController.index, name = 'artwork-list'),\n   path('artworks/update/<str:artwork_id>/', views.ArtworkController.update, name = 'update-artwork'),\n   path('artworks/delete/', views.ArtworkController.destroy, name = 'delete-artwork'),\n   path('posts/create/', views.PostController.store, name = 'add-post'),\n   path('posts/', views.PostController.index, name = 'post-list'),\n   path('posts/update/<str:post_id>/', views.PostController.update, name = 'update-post'),\n   path('posts/delete/', views.PostController.destroy, name = 'delete-post'),",
        "detail": "manager.urls",
        "documentation": {}
    },
    {
        "label": "OrderController",
        "kind": 6,
        "importPath": "manager.views",
        "description": "manager.views",
        "peekOfCode": "class OrderController:\n    @staticmethod\n    @login_required\n    @user_passes_test(is_staff_or_superuser)\n    def index(request) -> HttpResponse:\n        query = request.GET.get('q')\n        customers_with_orders = (\n            Customer.objects.filter(is_staff=False, is_superuser=False)\n            .annotate(order_count=Count('order', filter=Q(order__ordered=True)))\n            .filter(order_count__gt=0)",
        "detail": "manager.views",
        "documentation": {}
    },
    {
        "label": "ArtworkController",
        "kind": 6,
        "importPath": "manager.views",
        "description": "manager.views",
        "peekOfCode": "class ArtworkController:\n    @staticmethod\n    @login_required\n    def index(request) -> HttpResponse:\n        artworks = Artwork.objects.all().order_by('-updated_at')\n        # Gestion de la recherche\n        query = request.GET.get('q')\n        if query and query.strip():\n            artworks = artworks.filter(title__icontains=query)\n        paginator = Paginator(artworks, 10)",
        "detail": "manager.views",
        "documentation": {}
    },
    {
        "label": "PostController",
        "kind": 6,
        "importPath": "manager.views",
        "description": "manager.views",
        "peekOfCode": "class PostController:\n    @staticmethod\n    @login_required\n    @csrf_exempt\n    def store(request) -> HttpResponse:\n        if request.method == 'POST':\n            form = PostForm(request.POST, request.FILES)\n            if form.is_valid():\n                post = form.save(commit=False)\n                # Renommer l'image téléchargée",
        "detail": "manager.views",
        "documentation": {}
    },
    {
        "label": "CategoryController",
        "kind": 6,
        "importPath": "manager.views",
        "description": "manager.views",
        "peekOfCode": "class CategoryController:\n    @csrf_exempt\n    @login_required\n    @require_POST\n    def store(request) -> HttpResponseRedirect:\n        form = CategoryForm(request.POST)\n        if form.is_valid():\n            form.save()\n            messages.success(request, 'Category créé')\n            return redirect('manager:settings') ",
        "detail": "manager.views",
        "documentation": {}
    },
    {
        "label": "MediumController",
        "kind": 6,
        "importPath": "manager.views",
        "description": "manager.views",
        "peekOfCode": "class MediumController:\n    @csrf_exempt\n    @login_required\n    @require_POST\n    def store(request) -> HttpResponseRedirect:\n        form = MediumForm(request.POST)\n        if form.is_valid():\n            form.save()\n            messages.success(request, 'Medium créé')\n            return redirect('manager:settings') ",
        "detail": "manager.views",
        "documentation": {}
    },
    {
        "label": "first_day_of_month",
        "kind": 2,
        "importPath": "manager.views",
        "description": "manager.views",
        "peekOfCode": "def first_day_of_month(date):\n    return date.replace(day=1)\ndef is_staff_or_superuser(user):\n    return user.is_staff or user.is_superuser\n@login_required\ndef dashboard_page(request) -> HttpResponse:\n    artworks = Artwork.objects.all()\n    # Filtrer les ventes pour le mois en cours et le mois précédent\n    today = datetime.today()\n    current_month = first_day_of_month(today)",
        "detail": "manager.views",
        "documentation": {}
    },
    {
        "label": "is_staff_or_superuser",
        "kind": 2,
        "importPath": "manager.views",
        "description": "manager.views",
        "peekOfCode": "def is_staff_or_superuser(user):\n    return user.is_staff or user.is_superuser\n@login_required\ndef dashboard_page(request) -> HttpResponse:\n    artworks = Artwork.objects.all()\n    # Filtrer les ventes pour le mois en cours et le mois précédent\n    today = datetime.today()\n    current_month = first_day_of_month(today)\n    previous_month = first_day_of_month(today - timedelta(days=1)).replace(day=1)\n    sales_current_month = CheckOut.objects.filter(created_at__gte=current_month).count()",
        "detail": "manager.views",
        "documentation": {}
    },
    {
        "label": "dashboard_page",
        "kind": 2,
        "importPath": "manager.views",
        "description": "manager.views",
        "peekOfCode": "def dashboard_page(request) -> HttpResponse:\n    artworks = Artwork.objects.all()\n    # Filtrer les ventes pour le mois en cours et le mois précédent\n    today = datetime.today()\n    current_month = first_day_of_month(today)\n    previous_month = first_day_of_month(today - timedelta(days=1)).replace(day=1)\n    sales_current_month = CheckOut.objects.filter(created_at__gte=current_month).count()\n    sales_previous_month = CheckOut.objects.filter(created_at__gte=previous_month, created_at__lt=current_month).count()\n    # Récupérer les catégories d'œuvres et compter le nombre d'œuvres par catégorie\n    artwork_categories = Category.objects.annotate(artwork_count=Count('artwork')).order_by('-artwork_count')",
        "detail": "manager.views",
        "documentation": {}
    },
    {
        "label": "payment_list",
        "kind": 2,
        "importPath": "manager.views",
        "description": "manager.views",
        "peekOfCode": "def payment_list(request) -> HttpResponse:\n    payments = Payment.objects.all().order_by('-created_at')\n    # Gestion de la recherche\n    query = request.GET.get('q')\n    if query and query.strip():\n        payments = payments.filter(checkout__customer__username__icontains=query)\n    # Pagination\n    paginator = Paginator(payments, 10)\n    page_number = request.GET.get('page')\n    page_obj = paginator.get_page(page_number)",
        "detail": "manager.views",
        "documentation": {}
    },
    {
        "label": "settings_page",
        "kind": 2,
        "importPath": "manager.views",
        "description": "manager.views",
        "peekOfCode": "def settings_page(request) -> HttpResponse:\n    categories = Category.objects.all()\n    mediums = Medium.objects.all()\n    category_form = CategoryForm()\n    medium_form = MediumForm()\n    context = {\n        \"categories\": categories,\n        \"mediums\": mediums,\n        \"category_form\": category_form,\n        \"medium_form\": medium_form,",
        "detail": "manager.views",
        "documentation": {}
    },
    {
        "label": "download_image",
        "kind": 2,
        "importPath": "scripts.seeders",
        "description": "scripts.seeders",
        "peekOfCode": "def download_image(url):\n    response = requests.get(url)\n    if response.status_code == 200:\n        return ContentFile(response.content)\n    return None\ndef create_categories(n=5):\n    categories = []\n    for _ in range(n):\n        name = fake.word()\n        category = Category.objects.create(name=name, description=fake.text())",
        "detail": "scripts.seeders",
        "documentation": {}
    },
    {
        "label": "create_categories",
        "kind": 2,
        "importPath": "scripts.seeders",
        "description": "scripts.seeders",
        "peekOfCode": "def create_categories(n=5):\n    categories = []\n    for _ in range(n):\n        name = fake.word()\n        category = Category.objects.create(name=name, description=fake.text())\n        categories.append(category)\n    return categories\ndef create_media(n=5):\n    media = []\n    for _ in range(n):",
        "detail": "scripts.seeders",
        "documentation": {}
    },
    {
        "label": "create_media",
        "kind": 2,
        "importPath": "scripts.seeders",
        "description": "scripts.seeders",
        "peekOfCode": "def create_media(n=5):\n    media = []\n    for _ in range(n):\n        name = fake.word()\n        medium = Medium.objects.create(name=name)\n        media.append(medium)\n    return media\ndef create_artworks(categories, media, n=20):\n    artworks = []\n    image_url_template = 'https://picsum.photos/200/300?art={}'",
        "detail": "scripts.seeders",
        "documentation": {}
    },
    {
        "label": "create_artworks",
        "kind": 2,
        "importPath": "scripts.seeders",
        "description": "scripts.seeders",
        "peekOfCode": "def create_artworks(categories, media, n=20):\n    artworks = []\n    image_url_template = 'https://picsum.photos/200/300?art={}'\n    for _ in range(n):\n        title = fake.sentence(nb_words=4)\n        image_url = image_url_template.format(random.randint(1, 1000))\n        image_content = download_image(image_url)\n        if image_content:\n            artwork = Artwork.objects.create(\n                title=title,",
        "detail": "scripts.seeders",
        "documentation": {}
    },
    {
        "label": "create_users",
        "kind": 2,
        "importPath": "scripts.seeders",
        "description": "scripts.seeders",
        "peekOfCode": "def create_users(n=10):\n    User = get_user_model()\n    users = []\n    for _ in range(n):\n        user = User.objects.create_user(\n            username=fake.user_name(),\n            email=fake.email(),\n            password='password123',\n            first_name=fake.first_name(),\n            last_name=fake.last_name(),",
        "detail": "scripts.seeders",
        "documentation": {}
    },
    {
        "label": "create_posts",
        "kind": 2,
        "importPath": "scripts.seeders",
        "description": "scripts.seeders",
        "peekOfCode": "def create_posts(artworks, n=15):\n    posts = []\n    image_url_template = 'https://picsum.photos/200/300?random={}'\n    for _ in range(n):\n        title = fake.sentence(nb_words=4)\n        image_url = image_url_template.format(random.randint(1, 1000))\n        image_content = download_image(image_url)\n        post = Post.objects.create(\n            title=title,\n            slug=slugify(title),",
        "detail": "scripts.seeders",
        "documentation": {}
    },
    {
        "label": "create_orders",
        "kind": 2,
        "importPath": "scripts.seeders",
        "description": "scripts.seeders",
        "peekOfCode": "def create_orders(users, artworks, n=30):\n    orders = []\n    for _ in range(n):\n        order = Order.objects.create(\n            customer=random.choice(users),\n            artwork=random.choice(artworks),\n            quantity=random.randint(1, 5),\n            ordered=fake.boolean(chance_of_getting_true=50)\n        )\n        orders.append(order)",
        "detail": "scripts.seeders",
        "documentation": {}
    },
    {
        "label": "create_carts",
        "kind": 2,
        "importPath": "scripts.seeders",
        "description": "scripts.seeders",
        "peekOfCode": "def create_carts(users, orders):\n    for user in users:\n        cart = Cart.objects.create(customer=user)\n        cart.orders.set(random.sample(orders, k=random.randint(1, 5)))\n        cart.save()\ndef create_checkouts(users, orders):\n    for user in users:\n        checkout = CheckOut.objects.create(customer=user)\n        checkout.orders.set(random.sample(orders, k=random.randint(1, 5)))\n        checkout.save()",
        "detail": "scripts.seeders",
        "documentation": {}
    },
    {
        "label": "create_checkouts",
        "kind": 2,
        "importPath": "scripts.seeders",
        "description": "scripts.seeders",
        "peekOfCode": "def create_checkouts(users, orders):\n    for user in users:\n        checkout = CheckOut.objects.create(customer=user)\n        checkout.orders.set(random.sample(orders, k=random.randint(1, 5)))\n        checkout.save()\ndef populate_data():\n    print(\"Creating categories...\")\n    categories = create_categories()\n    print(\"Creating media...\")\n    media = create_media()",
        "detail": "scripts.seeders",
        "documentation": {}
    },
    {
        "label": "populate_data",
        "kind": 2,
        "importPath": "scripts.seeders",
        "description": "scripts.seeders",
        "peekOfCode": "def populate_data():\n    print(\"Creating categories...\")\n    categories = create_categories()\n    print(\"Creating media...\")\n    media = create_media()\n    print(\"Creating artworks...\")\n    artworks = create_artworks(categories, media)\n    print(\"Creating users...\")\n    users = create_users()\n    print(\"Creating posts...\")",
        "detail": "scripts.seeders",
        "documentation": {}
    },
    {
        "label": "fake",
        "kind": 5,
        "importPath": "scripts.seeders",
        "description": "scripts.seeders",
        "peekOfCode": "fake = Faker('fr-FR')\ndef download_image(url):\n    response = requests.get(url)\n    if response.status_code == 200:\n        return ContentFile(response.content)\n    return None\ndef create_categories(n=5):\n    categories = []\n    for _ in range(n):\n        name = fake.word()",
        "detail": "scripts.seeders",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "store.migrations.0001_initial",
        "description": "store.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Category',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "store.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "breadcrumb",
        "kind": 2,
        "importPath": "store.templatetags.store_custom_tags",
        "description": "store.templatetags.store_custom_tags",
        "peekOfCode": "def breadcrumb(title, msg, user, cart_items, *args, **kwargs):\n  data = {\n    'title': title,\n    'msg': msg,\n    'user': user,\n    'preview_cart_items': cart_items,\n  }\n  return data\n@register.inclusion_tag(os.path.join(settings.COMPONENTS_DIRS.get('store'), \"artwork-card.html\"))\ndef artworkCard(artwork, user, *args, **kwargs):",
        "detail": "store.templatetags.store_custom_tags",
        "documentation": {}
    },
    {
        "label": "artworkCard",
        "kind": 2,
        "importPath": "store.templatetags.store_custom_tags",
        "description": "store.templatetags.store_custom_tags",
        "peekOfCode": "def artworkCard(artwork, user, *args, **kwargs):\n  data = {\n    'artwork': artwork,\n    'user': user,\n  }\n  return data",
        "detail": "store.templatetags.store_custom_tags",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "store.templatetags.store_custom_tags",
        "description": "store.templatetags.store_custom_tags",
        "peekOfCode": "register = template.Library()\n@register.inclusion_tag(os.path.join(settings.COMPONENTS_DIRS.get('global'), \"breadcrumb.html\"))\ndef breadcrumb(title, msg, user, cart_items, *args, **kwargs):\n  data = {\n    'title': title,\n    'msg': msg,\n    'user': user,\n    'preview_cart_items': cart_items,\n  }\n  return data",
        "detail": "store.templatetags.store_custom_tags",
        "documentation": {}
    },
    {
        "label": "CategoryAdmin",
        "kind": 6,
        "importPath": "store.admin",
        "description": "store.admin",
        "peekOfCode": "class CategoryAdmin(admin.ModelAdmin):\n    list_display = ('name', 'created_at', 'updated_at')\n    search_fields = ('name', 'description')\n    list_filter = ('created_at', 'updated_at')\n@admin.register(Medium)\nclass MediumAdmin(admin.ModelAdmin):\n    list_display = ('name', 'created_at', 'updated_at')\n    search_fields = ('name',)\n    list_filter = ('created_at', 'updated_at')\n@admin.register(Artwork)",
        "detail": "store.admin",
        "documentation": {}
    },
    {
        "label": "MediumAdmin",
        "kind": 6,
        "importPath": "store.admin",
        "description": "store.admin",
        "peekOfCode": "class MediumAdmin(admin.ModelAdmin):\n    list_display = ('name', 'created_at', 'updated_at')\n    search_fields = ('name',)\n    list_filter = ('created_at', 'updated_at')\n@admin.register(Artwork)\nclass ArtworkAdmin(admin.ModelAdmin):\n    list_display = ('title', 'category', 'medium', 'price', 'stock', 'created_at', 'updated_at')\n    list_filter = ('category', 'medium', 'created_at', 'updated_at')\n    search_fields = ('title', 'description')\n    prepopulated_fields = {'slug': ('title',)}",
        "detail": "store.admin",
        "documentation": {}
    },
    {
        "label": "ArtworkAdmin",
        "kind": 6,
        "importPath": "store.admin",
        "description": "store.admin",
        "peekOfCode": "class ArtworkAdmin(admin.ModelAdmin):\n    list_display = ('title', 'category', 'medium', 'price', 'stock', 'created_at', 'updated_at')\n    list_filter = ('category', 'medium', 'created_at', 'updated_at')\n    search_fields = ('title', 'description')\n    prepopulated_fields = {'slug': ('title',)}\n@admin.register(Order)\nclass OrderAdmin(admin.ModelAdmin):\n    list_display = ('uuid', 'customer', 'artwork', 'quantity', 'ordered', 'created_at', 'ordered_at')\n    list_filter = ('ordered', 'created_at', 'ordered_at')\n    search_fields = ('customer__username', 'artwork__title')",
        "detail": "store.admin",
        "documentation": {}
    },
    {
        "label": "OrderAdmin",
        "kind": 6,
        "importPath": "store.admin",
        "description": "store.admin",
        "peekOfCode": "class OrderAdmin(admin.ModelAdmin):\n    list_display = ('uuid', 'customer', 'artwork', 'quantity', 'ordered', 'created_at', 'ordered_at')\n    list_filter = ('ordered', 'created_at', 'ordered_at')\n    search_fields = ('customer__username', 'artwork__title')\n@admin.register(Cart)\nclass CartAdmin(admin.ModelAdmin):\n    list_display = ('customer', 'created_at')\n    search_fields = ('customer__username',)\n    filter_horizontal = ('orders',)  # For ManyToManyField\n@admin.register(CheckOut)",
        "detail": "store.admin",
        "documentation": {}
    },
    {
        "label": "CartAdmin",
        "kind": 6,
        "importPath": "store.admin",
        "description": "store.admin",
        "peekOfCode": "class CartAdmin(admin.ModelAdmin):\n    list_display = ('customer', 'created_at')\n    search_fields = ('customer__username',)\n    filter_horizontal = ('orders',)  # For ManyToManyField\n@admin.register(CheckOut)\nclass CheckOutAdmin(admin.ModelAdmin):\n    list_display = ('uuid', 'customer', 'created_at')\n    filter_horizontal = ('orders',)  # For ManyToManyField\n    search_fields = ('customer__username',)",
        "detail": "store.admin",
        "documentation": {}
    },
    {
        "label": "CheckOutAdmin",
        "kind": 6,
        "importPath": "store.admin",
        "description": "store.admin",
        "peekOfCode": "class CheckOutAdmin(admin.ModelAdmin):\n    list_display = ('uuid', 'customer', 'created_at')\n    filter_horizontal = ('orders',)  # For ManyToManyField\n    search_fields = ('customer__username',)",
        "detail": "store.admin",
        "documentation": {}
    },
    {
        "label": "Customer",
        "kind": 5,
        "importPath": "store.admin",
        "description": "store.admin",
        "peekOfCode": "Customer = get_user_model()\n# Register your models here.\n@admin.register(Category)\nclass CategoryAdmin(admin.ModelAdmin):\n    list_display = ('name', 'created_at', 'updated_at')\n    search_fields = ('name', 'description')\n    list_filter = ('created_at', 'updated_at')\n@admin.register(Medium)\nclass MediumAdmin(admin.ModelAdmin):\n    list_display = ('name', 'created_at', 'updated_at')",
        "detail": "store.admin",
        "documentation": {}
    },
    {
        "label": "StoreConfig",
        "kind": 6,
        "importPath": "store.apps",
        "description": "store.apps",
        "peekOfCode": "class StoreConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'store'",
        "detail": "store.apps",
        "documentation": {}
    },
    {
        "label": "Category",
        "kind": 6,
        "importPath": "store.models",
        "description": "store.models",
        "peekOfCode": "class Category(models.Model):\n    name = models.CharField(max_length=128, unique=True)\n    description = models.TextField(blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    class Meta:\n        verbose_name = \"Category\"\n        verbose_name_plural = \"Categories\"\n        db_table = \"store_category\"\n        ordering = [\"name\"]",
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "Medium",
        "kind": 6,
        "importPath": "store.models",
        "description": "store.models",
        "peekOfCode": "class Medium(models.Model):\n    name = models.CharField(max_length=128, unique=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    class Meta:\n        verbose_name = \"Medium\"\n        verbose_name_plural = \"Media\"\n        db_table = \"store_medium\"\n        ordering = [\"name\"]\n    def __str__(self):",
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "Artwork",
        "kind": 6,
        "importPath": "store.models",
        "description": "store.models",
        "peekOfCode": "class Artwork(models.Model):\n    title = models.CharField(max_length=180, unique=True)\n    slug = models.SlugField(max_length=200, unique=True)\n    description = models.TextField(blank=True)\n    price = models.FloatField(default=0.0)\n    stock = models.IntegerField(default=1)\n    width = models.PositiveIntegerField()\n    height = models.PositiveIntegerField()\n    thumbnail = models.ImageField(upload_to=\"artworks\", blank=True, null=True)\n    category = models.ForeignKey(Category, on_delete=models.CASCADE)",
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "Order",
        "kind": 6,
        "importPath": "store.models",
        "description": "store.models",
        "peekOfCode": "class Order(models.Model):\n    uuid = ShortUUIDField(unique=True, length=10, max_length=30, prefix='order', alphabet='abcdefghijklmnopqrstuvwxyz1234567890')\n    customer = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)\n    artwork = models.ForeignKey(Artwork, on_delete=models.CASCADE)\n    quantity = models.IntegerField(default=1)\n    ordered = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    ordered_at = models.DateTimeField(blank=True, null=True)\n    class Meta:",
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "Cart",
        "kind": 6,
        "importPath": "store.models",
        "description": "store.models",
        "peekOfCode": "class Cart(models.Model):\n    customer = models.OneToOneField(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)\n    orders = models.ManyToManyField(Order)\n    created_at = models.DateTimeField(auto_now_add=True)\n    class Meta:\n        db_table = \"store_cart\"\n        ordering = [\"-created_at\"]\n    def __str__(self):\n        return f\"Cart of {self.customer.username}\"\n    @property",
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "CheckOut",
        "kind": 6,
        "importPath": "store.models",
        "description": "store.models",
        "peekOfCode": "class CheckOut(models.Model):\n    uuid = ShortUUIDField(unique=True, length=10, max_length=30, alphabet='abcdefghijklmnopqrstuvwxyz1234567890')\n    customer = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)\n    orders = models.ManyToManyField(Order)\n    created_at = models.DateTimeField(auto_now_add=True)\n    class Meta:\n        verbose_name = \"CheckOut\"\n        db_table = \"store_checkout\"\n        ordering = [\"-created_at\"]\n    def __str__(self):",
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "Payment",
        "kind": 6,
        "importPath": "store.models",
        "description": "store.models",
        "peekOfCode": "class Payment(models.Model):\n    EUR = 'EUR'\n    USD = 'USD'\n    CURRENCY_CHOICES = [\n        (EUR, 'EUR'),\n        (USD, 'USD'),\n    ]\n    STATUS_CHOICES = [\n        ('Pending', 'Pending'),\n        ('Completed', 'Completed'),",
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "store.urls",
        "description": "store.urls",
        "peekOfCode": "app_name = \"store\"\nurlpatterns = [\n   path('', views.home_page, name=\"home\"),\n   path('about/', views.about_page, name=\"about\"),\n   path('gallery/', views.gallery_page, name=\"gallery\"),\n   path('artwork/<str:slug>/', views.artwork_detail_page, name=\"artwork-detail\"),\n   path('store/cart/', views.cart_page, name=\"cart\"),\n   path('store/cart/add-to-cart/', views.add_to_cart, name='add-to-cart'),\n   path('store/cart/remove-from-cart/', views.remove_from_cart, name='remove-from-cart'),\n   path('store/cart/checkout/', views.checkout_page, name=\"checkout\"),",
        "detail": "store.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "store.urls",
        "description": "store.urls",
        "peekOfCode": "urlpatterns = [\n   path('', views.home_page, name=\"home\"),\n   path('about/', views.about_page, name=\"about\"),\n   path('gallery/', views.gallery_page, name=\"gallery\"),\n   path('artwork/<str:slug>/', views.artwork_detail_page, name=\"artwork-detail\"),\n   path('store/cart/', views.cart_page, name=\"cart\"),\n   path('store/cart/add-to-cart/', views.add_to_cart, name='add-to-cart'),\n   path('store/cart/remove-from-cart/', views.remove_from_cart, name='remove-from-cart'),\n   path('store/cart/checkout/', views.checkout_page, name=\"checkout\"),\n   path('contact/', views.contact_page, name=\"contact\"),",
        "detail": "store.urls",
        "documentation": {}
    },
    {
        "label": "get_cart_items",
        "kind": 2,
        "importPath": "store.utils",
        "description": "store.utils",
        "peekOfCode": "def get_cart_items(user):\n    cart = Cart.objects.get(customer = user)\n    orders = cart.orders.all()\n    total_cost = cart.total_cost\n    return orders, total_cost\ndef get_unique_filename(instance, filename):\n    extension = filename.split('.')[-1]\n    filename = f\"{instance.title}_{uuid.uuid4().hex[:8]}.{extension}\"\n    file_path = f'media/artworks/{filename}'\n    return os.path.join(settings.BASE_DIR, file_path)",
        "detail": "store.utils",
        "documentation": {}
    },
    {
        "label": "get_unique_filename",
        "kind": 2,
        "importPath": "store.utils",
        "description": "store.utils",
        "peekOfCode": "def get_unique_filename(instance, filename):\n    extension = filename.split('.')[-1]\n    filename = f\"{instance.title}_{uuid.uuid4().hex[:8]}.{extension}\"\n    file_path = f'media/artworks/{filename}'\n    return os.path.join(settings.BASE_DIR, file_path)",
        "detail": "store.utils",
        "documentation": {}
    },
    {
        "label": "home_page",
        "kind": 2,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "def home_page(request):\n    artworks = Artwork.objects.all().order_by('-updated_at')[:3]\n    posts = Post.objects.all().order_by('-updated_at')[:3]\n    cart_items = None\n    if request.user.is_authenticated:\n        try:\n            cart = Cart.objects.get(customer=request.user)\n            cart_items = cart.orders.select_related('artwork').order_by('-updated_at')\n        except Cart.DoesNotExist:\n            cart = None",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "about_page",
        "kind": 2,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "def about_page(request):\n    cart_items = None\n    if request.user.is_authenticated:\n        try:\n            cart = Cart.objects.get(customer=request.user)\n            cart_items = cart.orders.select_related('artwork').order_by('-updated_at')\n        except Cart.DoesNotExist:\n            cart = None\n    context = {\n        'preview_cart_items': cart_items[:3] if cart_items else None,",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "gallery_page",
        "kind": 2,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "def gallery_page(request):\n    artworks = Artwork.objects.all().order_by(\"-updated_at\")\n    cart_items = None\n    user = request.user\n    if user.is_authenticated:\n        try:\n            cart, _ = get_cart_items(user)\n            cart_items = cart.select_related('artwork').order_by('-updated_at')\n        except Cart.DoesNotExist:\n            cart = None",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "artwork_detail_page",
        "kind": 2,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "def artwork_detail_page(request, slug):\n    cart_items = None\n    user = request.user\n    if user.is_authenticated:\n        try:\n            cart, _ = get_cart_items(user)\n            cart_items = cart.select_related('artwork').order_by('-updated_at')\n        except Cart.DoesNotExist:\n            cart = None\n    artwork = get_object_or_404(Artwork, slug=slug)",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "contact_page",
        "kind": 2,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "def contact_page(request) -> HttpResponse:\n    cart_items = None\n    user = request.user\n    if user.is_authenticated:\n        try:\n            cart, _ = get_cart_items(user)\n            cart_items = cart.select_related('artwork').order_by('-updated_at')\n        except Cart.DoesNotExist:\n            cart = None\n    if request.method == 'POST':",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "cart_page",
        "kind": 2,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "def cart_page(request):\n    user = request.user\n    cart, total_cost = get_cart_items(user)\n    context = {\n        \"cart\": cart.select_related('artwork').order_by('-updated_at'),\n        \"total_cost\": total_cost,\n        'preview_cart_items': cart.select_related('artwork').order_by('-updated_at')[:3] if cart.exists() else None,\n    }\n    return render(request, \"store/pages/cart.html\", context)\n@login_required",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "checkout_page",
        "kind": 2,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "def checkout_page(request):\n    user = request.user\n    cart, total_cost = get_cart_items(user)\n    if request.method == \"POST\":\n        CheckOut.objects.create(customer=user, orders=cart.orders.all())\n        cart.delete()\n        return redirect(\"store:shop\")\n    context = {\n        'cart': cart,\n        'total_cost': total_cost,",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "add_to_cart",
        "kind": 2,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "def add_to_cart(request):\n    if request.method == \"POST\":\n        data = json.loads(request.body)\n        artwork_id = data.get(\"artwork_id\")\n        quantity = int(data.get(\"quantity\"))\n        try:\n            artwork = Artwork.objects.get(id=artwork_id)\n        except Artwork.DoesNotExist:\n            return JsonResponse({\"error\": \"Artwork not found\"}, status=404)\n        cart, created = Cart.objects.get_or_create(customer=request.user)",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "remove_from_cart",
        "kind": 2,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "def remove_from_cart(request):\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        order_uuid = data.get('order_uuid')\n        if request.user.is_authenticated:\n            cart_items = None\n            try:\n                order = get_object_or_404(Order, uuid=order_uuid)\n                cart = get_object_or_404(Cart, customer=request.user)\n                cart_items = cart.orders.select_related('artwork').order_by('-updated_at')",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "stripe.api_key",
        "kind": 5,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "stripe.api_key = settings.STRIPE_SECRET_KEY\ndef home_page(request):\n    artworks = Artwork.objects.all().order_by('-updated_at')[:3]\n    posts = Post.objects.all().order_by('-updated_at')[:3]\n    cart_items = None\n    if request.user.is_authenticated:\n        try:\n            cart = Cart.objects.get(customer=request.user)\n            cart_items = cart.orders.select_related('artwork').order_by('-updated_at')\n        except Cart.DoesNotExist:",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'art_by_mtr.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]